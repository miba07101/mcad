---
format:
  typst:
    keep-typ: true
---

```{=typst}
#let title(content) = {
	set align(center)
	rect(
		width: 100%,
		[#content],
	)
}

#let header(content) = {
	set align(center)
	rect(
		width: 100%,
		[#content],
	)
}

#let cell(content) = {
	set align(left)
	rect(
		width: 100%,
		stroke: (left: 1pt, right: 1pt),
		[#content]
	)
}

#let formatrow(r) = {
	(cell(r.at(0)), cell(r.at(1)), cell(r.at(2)))
}

#let table(values) = {
	rect(
		stroke: (bottom: 1pt, top: 1pt),
		inset: 0pt,
		outset: 0pt,
		grid(
			columns: (auto),
			rows: (auto),
			// table title
			grid(
				columns: (100%),
				title(values.at(0)),
			),
			// header row
			grid(
				columns: (1fr, 1fr, 1fr),
				..values.at(1).map(header),
			),
			// content row
			grid(
				columns: (1fr, 1fr, 1fr),
				..values.slice(2).map(formatrow).flatten()
			),
		)
	)
}

#let values = (
	("Country List"),
	("Country Name or Area Name", "ISO ALPHA 2 Code", "ISO ALPHA 3"),
	("Afghanistan", "AF", "AFT"),
	("Aland Islands", "AX", "ALA"),
	("Albania", "AL", "ALB"),
	("Algeria", "DZ", "DZA"),
	("American Samoa", "AS", "ASM"),
	("Andorra", "AD", "AND"),
	("Angola", "AP", "AGO"),
)

#table(values)
```


```{=typst}
#import "@preview/tablex:0.0.8": tablex, rowspanx, colspanx
#align(center+bottom)[
#figure(
tablex(
  columns: 4,
  align: center + horizon,
  auto-vlines: false,

  // indicate the first two rows are the header
  // (in case we need to eventually
  // enable repeating the header across pages)
  header-rows: 2,

  // color the last column's cells
  // based on the written number
  map-cells: cell => {
    if cell.x == 3 and cell.y > 1 {
      cell.content = {
        let value = int(cell.content.text)
        let text-color = if value < 10 {
          red.lighten(30%)
        } else if value < 15 {
          yellow.darken(13%)
        } else {
          green
        }
        set text(text-color)
        strong(cell.content)
      }
    }
    cell
  },

  /* --- header --- */
  rowspanx(2)[*Username*], colspanx(2)[*Data*], (), rowspanx(2)[*Score*],
  (),                 [*Location*], [*Height*], (),
  /* -------------- */

  [John], [Second St.], [180 cm], [5],
  [Wally], [Third Av.], [160 cm], [10],
  [Jason], [Some St.], [150 cm], [15],
  [Robert], [123 Av.], [190 cm], [20],
  [Other], [Unknown St.], [170 cm], [25],
),
caption: "Table caption",
//kind: table
)
]
```

